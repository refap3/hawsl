lightspresence:
  sequence:
    - service: counter.increment
      entity_id: 
      - counter.pres_simul_exec_counter
    - service: light.turn_on
      data_template:
        entity_id: >
          group.lightspresence{{ (range(1, 3) | random) }} 
    - delay: '00:00:{{ (range(1, 10) | random) }}'
# execute only  if triggering condition is still TRUE ie. we are NOT_HOME

    - service: persistent_notification.create
      data:
        message: BEFORE condition 

    - condition: and
      conditions:
      - condition: state
        entity_id: sensor.presence
        state: 'not_home'

    - service: persistent_notification.create
      data:
        message: AFTER condition 

    - service: light.turn_off
      entity_id: 
      - group.lightspresence1
      - group.lightspresence2
    - delay: '00:00:{{ (range(1, 10) | random) }}'



test_pb:
  sequence:
    - service:  notify.pushbullet
      data_template:
        title: "HELLO TRITLE from a trootl"
        message: "Fan is running: {{ states('sensor.vz_light_daytime')}}"
